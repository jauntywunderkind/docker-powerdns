# print all pdns config
_pdnsConfdVars(){
	local pdns="${PDNS_ETC_FILE:-/etc/powerdns/pdns.conf}"
	[ -f "$pdns" ] && cat $pdns
	for entry in ${PDNS_CONFD_DIR:-/etc/powerdns/conf.d}/*\.conf ; do
		cat $entry
	done
}

# get a variable (named in $1) from pdns. optional pdnsVars as arg2.
_pdnsConfVar(){
	# get all variables
	local allVars="${2:-${_pdnsConfdVars}}"
	# look through all vars for $1
	local found="$(echo "$2" | grep -e "^$1\s*=" | tail -n1)"
	echo $(echo $found | sed -e "s/^$1\s*=\s*//")
}

# get a variable from kube
_pdnsKubeEtcVar(){
	for dir in ${PDNS_KUBE_ETC_DIRS:-/etc/powerdns/kube}/* ; do
		[ -e $dir/$1 ] && cat $dir/$1 && return
	done
}

# get a variable, from either
pdnsVar(){
	local pdns="$(_pdnsConfVar "$1" "$2")"
	[ -n "$pdns" ] && echo $pdns && return
	local kube="$(_pdnsKubeEtcVar "$1")"
	[ -n "$kube" ] && echo $kube && return
	[ -n "$3" ] && echo $3
}

# echo out the psql environment variables
pdnsPsqlEnv(){
	local pv="${1:-$(_pdnsConfdVars)}"
	local host="$(pdnsVar gpgsql-host "$pv")"
	echo "export PGHOST=$host"
	local port="$(pdnsVar gpgsql-port "$pv" 5432)"
	echo "export PGPORT=$port"
	local dbname="$(pdnsVar gpgsql-dbname "$pv")"
	echo "export PGDATABASE=$dbname"
	local user="$(pdnsVar gpgsql-user $pv)"
	echo "export PGUSER=$user"

	[ "$1" = "-p" ] && echo "export PGPASSWORD=\"$(pdnsVar gpgsql-password "$pv")\""

	#local extra="$(pdnsVar gpgsql-extra-connection-parameters "$pv")"
	#[ -n "$extra" ] && extra=$(echo $extra | sed 's/\s/\&/g') # what other url-ization ought happen here?

	#echo "$host:$port:$dbname:$user:$password" > ~/.pgpass
	#chmod 0600 ~/.pgpass
}

# set the psql env vars
pdnsPsqlEnvSet(){
	eval $(pdnsPsqlEnv $*)
}

# write the pgpass file
pdnsPgPassWrite(){
	[ -f ~/.pgpass ] && [ "$1" != "-f" ] && return
	[ -z "$PGPASSWORD" ] && PGPASSWORD="$(pdnsVar gpgsql-password "${2:-$(_pdnsConfdVars)}")"
	echo "$PGHOST:$PGPORT:$PGDATABASE:$PGUSER:$PGPASSWORD" > ~/.pgpass
	chmod 0600 ~/.pgpass
	unset $PGPASSWORD
}

pdnsScriptHelperInit(){
	local pv="$(_pdnsConfdVars)"
	[ -z "$PGHOST" ] || pdnsPgEnvSet "$pv"
	pdnsPgPassWrite -f "$pv"
}

pdnsExportKubeEtc(){
	for f in $1/*
	do
		export $(basename $f)="$(cat $f)"
	done
}

# print vars
[ -z "$SOURCE_ONLY" ] || eval pdnsPsqlEnv $*
